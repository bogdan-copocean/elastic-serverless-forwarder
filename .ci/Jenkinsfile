#!/usr/bin/env groovy

@Library('apm@current') _

pipeline {
  agent { label 'ubuntu-20 && immutable && gobld/machineType:c2-standard-8' }
  environment {
    REPO = "elastic-serverless-forwarder"
    BASE_DIR = "src/github.com/elastic/${env.REPO}"
    JOB_GIT_CREDENTIALS = "f6c7695a-671e-4f4f-a331-acdce44ff9ba"
    PIPELINE_LOG_LEVEL = 'INFO'
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  triggers {
    issueCommentTrigger("${obltGitHubComments()}")
  }
  stages {
    stage('Checkout') {
      steps {
        deleteDir()
        gitCheckout(basedir: "${BASE_DIR}")
        stash(allowEmpty: true, name: 'source', useDefaultExcludes: false)
      }
    }
    stage('Lint'){
      steps {
        withGithubNotify(context: "Lint") {
          dir("${BASE_DIR}"){
            sh(label: 'lint', script: 'make docker-lint')
          }
        }
      }
    }
    stage('License'){
      steps {
        withGithubNotify(context: "License") {
          dir("${BASE_DIR}"){
            sh(label: 'license', script: 'make license')
          }
        }
      }
    }
    stage('Notice'){
      steps {
        withGithubNotify(context: "Notice") {
          dir("${BASE_DIR}"){
            sh(label: 'notice-generator', script: 'make docker-notice-generator')
          }
        }
      }
    }
    stage('Test') {
      failFast false
      steps {
        withGithubNotify(context: "Test") {
          dir("${BASE_DIR}"){
            sh(label: 'coverage', script: 'make docker-coverage')
          }
        }
      }
      post {
        always {
          junit(allowEmptyResults: true, keepLongStdio: true, testResults: '**/elastic-serverless-forwarder-junit.xml')
          cobertura(coberturaReportFile: "${BASE_DIR}/coverage.xml")
        }
      }
    }
  }
  post {
    cleanup {
      notifyBuildResult(prComment: true)
    }
  }
}
